#include <iostream>
#include <string>
#include <stack>

using namespace std;

/* Функция возвращает значение true в случае валидной расстановки скобок и false в случае невалидной расстановки скобок. */
/* Валидной считается такая расстановка скобок, при которой каждой открывающейся скобке соответсвует парная закрывающаяся, */
/* причем скобки не должны "перемешиваться" - открывающаяся скобка должна идти перед закрывающейся, */
/* первая открытая скобка должна закрываться последней */
/* Пример валидной строки: "([])"  */
/* Пример невалидные строки: "{[(]}" */
bool check_brackets(string source)
{
	stack <char> brackets;		// для хранения скобок, найденных в строке, будем использовать стек

	for (auto cur : source)		// проверяем всю строку поэлементно, ищем скобки
	{
		if ((cur == '(') || (cur == '{') || (cur == '['))		// если нашли открывающуюся скобку
			brackets.push(cur);									// кладем ее в стек
		else 
			if ((cur == ')') || (cur == '}') || (cur == ']'))	// если нашли закрывающуюся скобку
			{
				// если стек пуст, то закрывающихся скобок больше, либо первая скобка - открывающася
				if (brackets.empty())							
					return false;								// выход из функции, скобки расставлены неверно

				char stack_top = brackets.top();				// получаем верхний элемент стека
				switch (cur)									// там должна быть соответствующая открывающася скобка
				{
					case ')':
						if (stack_top == '(')					// если на вершине стека нужная скобка
						{
							brackets.pop();						// удаляем верхний элемент
							break;								// выход из оператора (проверяем строку дальше)
						}
						else									// скобка не подошла => скобки в строке расставлены неверно
							return false;						// выход из функции

					case '}':
						if (stack_top == '{')					// если на вершине стека нужная скобка
						{
							brackets.pop();						// удаляем верхний элемент
							break;								// выход из оператора (проверяем строку дальше)
						}
						else									// скобка не подошла => скобки в строке расставлены неверно
							return false;						// выход из функции

					case ']':
						if (stack_top == '[')						// если на вершине стека нужная скобка
						{
							brackets.pop();						// удаляем верхний элемент
							break;								// выход из оператора (проверяем строку дальше)
						}
						else									// скобка не подошла => скобки в строке расставлены неверно
							return false;						// выход из функции
				}
				
			}
	}

	if (brackets.empty())	// если для каждой открывающейся скобки была найдена пара, то стек будет пуст
		return true;		// скобки в строке расставлены корретно
	else					// если в стеке остались открывающиеся скобки
		return false;		// скобки в строке расставлены неверно
}

int main()
{
	setlocale(LC_ALL, "rus");
	string source;
	getline(cin, source);			// строка вводится из стандартного потока ввода
	if (check_brackets(source))
		cout << "true" << endl;		
	else
		cout << "false" << endl;
	return 0;
}